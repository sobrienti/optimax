I"¸<p>Some ad-blockers might block Optimizely from running. In this tutorial, weâ€™ll see how we can prevent this from happening.</p>

<p>Ad-blockers will often look at the domain the request is originating from and if it happens to be from a list of known analytics tools (such as Optimizely.com), the ad blocker will block the network request from happening.</p>

<p>The key solution is to proxy requests via an API gateway which will forward all requests back to Optimizely.com</p>

<p>Hereâ€™s how.</p>

<h2 id="if-you-are-using-aws">If you are using AWS</h2>

<h3 id="step-1-create-an-aws-api-gateway">Step 1: Create an AWS API Gateway</h3>

<p>Head the <a href="https://aws.amazon.com">AWS Management Console</a> then head to the API gateway section</p>

<p><img src="/image1.png" alt="AWS API Gateway" />
<em>The AWS API Gateway Section</em></p>

<p>Then, click on <em>Create New API</em></p>

<p><img src="/image2.png" alt="AWS API Gateway" />
<em>Click to create a new API</em></p>

<p>Select <em>HTTP API</em> as the API type:
<img src="/image3.png" alt="AWS API Gateway" />
<em>Select API type</em></p>

<h3 id="step-3-create-the-required-routes">Step 3: Create the required routes</h3>

<p>Now we are going to create our API routes and where the API will forward the requests to.</p>

<p>Weâ€™ll need 3 routes, depending on the Optimizely product you use:</p>
<ol>
  <li>One that allows us to retrieve the Optimizely snippet (if you are using Web). The snippet is fetched via a <code class="language-plaintext highlighter-rouge">GET</code> request done to https://cdn.optimizely.com. You can find the full snippet URL inside your Project settings.</li>
  <li>One that allows us to send decision &amp; conversion events (logx.optimizely.com). This route will be fetched via a <code class="language-plaintext highlighter-rouge">POST</code> request to https://logx.optimizely.com/v1/event.</li>
  <li>One that allows us to retrieve the Optimizely datafile (if you are using Full Stack). This route will be fetched via a <code class="language-plaintext highlighter-rouge">GET</code> request to https://cdn.optimizely.com/datafiles. You can find your datafile URL inside your Project settings.</li>
</ol>

<p><img src="/image4.png" alt="AWS API Gateway" />
<em>Add to these values your Optimizely snippet and/or datafile</em></p>

<p>Hereâ€™s how it should look like once properly filled out:</p>

<p><img src="/image5.png" alt="AWS API Gateway" />
<em>With snippet and/or datafile filled out</em></p>

<p>AWS will ask you for a confirmation:</p>

<p><img src="/image6.png" alt="AWS API Gateway" />
<em>Final review</em></p>

<p>Change the ANY to be exactly the same as the method on the right-hand side. (POST, GET &amp; GET)</p>

<p>Congrats you now have a working API which will proxy requests to Optimizely.com</p>

<h3 id="step-4-fetch-optimizely-from-your-newly-created-api-gateway">Step 4: Fetch Optimizely from your newly-created API gateway</h3>

<p>Now that weâ€™ve got a working API, itâ€™s time to update our website to start fetching from this API.</p>

<h4 id="optimizely-web">Optimizely Web</h4>

<p>Update your script tag that contains Optimizely to no longer fetch the file from cdn.optimizely.com but from your AWS API Gateway. 
Youâ€™ll find the invoke URL on the main API page, as such:</p>

<p><img src="/image7.png" alt="AWS API Gateway" />
<em>The invoke URL for your API</em></p>

<p>Now to ensure the Optimizely snippet sends events to the API gateway instead of the default Optimizely endpoint, this is a custom snippet setting that canâ€™t be configured by a customer. Youâ€™ll need to ask your account manager about it. They can amend your snippet to ensure the snippet dispatches events to your newly-created API.</p>

<h4 id="optimizely-full-stack">Optimizely Full Stack</h4>

<p>For Full Stack, youâ€™ll need to customize the SDKâ€™s <em>createInstance</em> method to include a new datafile URL pointing to your API, as such</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td> --><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">optimizely</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">@optimizely/optimizely-sdk</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">optimizelyClientInstance</span> <span class="o">=</span> <span class="nx">optimizely</span><span class="p">.</span><span class="nx">createInstance</span><span class="p">({</span>
  <span class="na">sdkKey</span><span class="p">:</span> <span class="dl">'</span><span class="s1">[YOUR_SDK_KEY]</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">datafileOptions</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">autoUpdate</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">urlTemplate</span><span class="p">:</span> <span class="dl">'</span><span class="s1">https://[API_GATEWAY_INVOKE_URL]/datafiles/%s.json</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Youâ€™ll also need to provide a custom event dispatcher which will dispatch the events back to your newly AWS API Gateway. You can use <a href="https://github.com/optimizely/javascript-sdk/blob/master/packages/optimizely-sdk/lib/plugins/event_dispatcher/index.browser.ts#L39">this built-in event dispatcher</a> and change line 39 to indicate the POST endpoint of your newly created API.</p>
:ET