[
  
  {
    "title": "Prevent Optimizely from being blocked by ad-blockers",
    "url": "/posts/prevent-ad-block/",
    "categories": "Security & Safety",
    "tags": "Optimizely Web, Optimizely Full Stack",
    "date": "2022-07-13 00:00:00 -0500",
    





    "snippet": "Some ad-blockers might block Optimizely from running. In this tutorial, we’ll see how we can prevent this from happening.Ad-blockers will often look at the domain the request is originating from and if it happens to be from a list of known analytics tools (such as Optimizely.com), the ad blocker will block the network request from happening.The key solution is to proxy requests via an API gateway which will forward all requests back to Optimizely.comHere’s how.If you are using AWSStep 1: Create an AWS API GatewayHead the AWS Management Console then head to the API gateway sectionThe AWS API Gateway SectionThen, click on Create New APIClick to create a new APISelect HTTP API as the API type:Select API typeStep 2: Create the required routesNow we are going to create our API routes and where the API will forward the requests to.We’ll need 3 routes, depending on the Optimizely product you use:  One that allows us to retrieve the Optimizely snippet (if you are using Web). The snippet is fetched via a GET request done to https://cdn.optimizely.com. You can find the full snippet URL inside your Project settings.  One that allows us to send decision &amp; conversion events (logx.optimizely.com). This route will be fetched via a POST request to https://logx.optimizely.com/v1/event.  One that allows us to retrieve the Optimizely datafile (if you are using Full Stack). This route will be fetched via a GET request to https://cdn.optimizely.com/datafiles. You can find your datafile URL inside your Project settings.Add to these values your Optimizely snippet and/or datafileHere’s how it should look like once properly filled out:With snippet and/or datafile filled outAWS will ask you for a confirmation:Final reviewChange the ANY to be exactly the same as the method on the right-hand side. (POST, GET &amp; GET)Congrats you now have a working API which will proxy requests to Optimizely.comStep 3: Fetch Optimizely from your newly-created API gatewayNow that we’ve got a working API, it’s time to update our website to start fetching from this API.Optimizely WebUpdate your script tag that contains Optimizely to no longer fetch the file from cdn.optimizely.com but from your AWS API Gateway. You’ll find the invoke URL on the main API page, as such:The invoke URL for your APINow to ensure the Optimizely snippet sends events to the API gateway instead of the default Optimizely endpoint, this is a custom snippet setting that can’t be configured by a customer. You’ll need to ask your account manager about it. They can amend your snippet to ensure the snippet dispatches events to your newly-created API.Optimizely Full StackFor Full Stack, you’ll need to customize the SDK’s createInstance method to include a new datafile URL pointing to your API, as suchconst optimizely = require('@optimizely/optimizely-sdk');const optimizelyClientInstance = optimizely.createInstance({  sdkKey: '[YOUR_SDK_KEY]',  datafileOptions: {    autoUpdate: true,    urlTemplate: 'https://[API_GATEWAY_INVOKE_URL]/datafiles/%s.json',  },});You’ll also need to provide a custom event dispatcher which will dispatch the events back to your newly AWS API Gateway. You can use this built-in event dispatcher and change line 39 to indicate the POST endpoint of your newly created API."
  },
  
  {
    "title": "Send Events from Optimizely Full Stack to Optimizely Web",
    "url": "/posts/fs-to-web/",
    "categories": "Integrations, Events",
    "tags": "Optimizely Web, Optimizely Full Stack",
    "date": "2022-07-13 00:00:00 -0500",
    





    "snippet": "if you’re a customer running both Optimizely Full Stack &amp; Web on your platform, it could make sense to trigger your conversion events once and have these be sent to both Full Stack &amp; Web. This is exactly what we’re going to cover today.Step 1: RequirementsThis is the scenario where you have Optimizely Full Stack running on your pages but the Optimizely Web snippet isn’t present. With the code snippet below, you’ll be able to send an Optimizely Web event everytime you trigger an Optimizely Full Stack event.Step 2: Get the required identifiersGrab the following identifiers:  your Optimizely account ID  the Optimizely project ID where the Web events will be dispatched to  the userId used in OptimizelyWeb (normally the optimizelyEndUserId)  the name of the Optimizely SDK client on your pageStep 3: Copy the code belowInclude the code below in your pages where you’d like to forward events from FS to Web :// This code is meant to be added on every page where you'd like to mirror events// It needs to run AFTER createInstance is called// in the last line, replace optimizelyClient with the name of your optimizely instance pointing to the notificationCenterwindow.FSWebIntegrator = (function() {    return {         account_id: \"\", // Optimizely Account ID         project_id:\"\", // project ID where the web events need to be dispatched to         user_id:'1234', // where the Web userId is         endpoint:\"https://logx.optimizely.com/v1/events\",         method:\"POST\",         optimizelyClientNotificationCenter:optimizelySdk     };   });   window.FSWebIntegrator.dispatchNetworkEvent = function() {    var Http = new XMLHttpRequest();     Http.open(FSWebIntegrator().method, FSWebIntegrator().endpoint);      Http.send(JSON.stringify(this.body));          Http.onreadystatechange = function(e) {     };      // todo: handle event failure     Http.onerror = function(e) {       console.log(e);     };  } window.FSWebIntegrator.buildEventPayload = function(event) {    // We copy the web attributes    if(event.attributes !== undefined) {    var attributes = Object.entries(event.attributes).map(function(entry) {        return {            entity_id: null, // entity_id set to null as web snippet doesn't expose attribute ID            key: entry[0],            type:\"custom\",            value: entry[1]+''        }    })  }    // Support for bot filtering    var attributes = attributes || [];    attributes.push(        {            entity_id: \"$opt_bot_filtering\",            key: \"$opt_bot_filtering\",            type:\"custom\",            value: false        }    );     this.body = {       \"account_id\": window.FSWebIntegrator().account_id,       \"project_id\":window.FSWebIntegrator().project_id,       \"revision\":\"100\",       \"visitors\":         [           {            \"visitor_id\":window.FSWebIntegrator().user_id,             \"attributes\": attributes,             \"snapshots\": [             {               \"decisions\": [],               \"events\": [                 {                   \"entity_id\": event.eventId,                   \"key\": event.eventKey,                   \"timestamp\": Date.now(),                   \"uuid\":Math.round(Math.random()*100000000),                   \"revenue\":event.eventTags !== undefined ? event.eventTags.revenue : 0,                   \"value\":event.eventTags !== undefined ? event.eventTags.value : 0                 }               ]             }             ]            }          ],          \"anonymize_ip\": true,          \"client_name\": \"Optimizely/webfsintegration\",          \"client_version\": \"1.0.0\",          \"enrich_decisions\": true     };     return this;   }window.FSWebIntegrator.sendWebEvent = function(event) {    window.FSWebIntegrator.buildEventPayload(event);    window.FSWebIntegrator.dispatchNetworkEvent();}var onTrack = (event) =&gt; {    if(event.eventKey !== undefined) {        var optlyEvents = localStorage.getItem('Optly_events');        if(optlyEvents === null) {            return true;        }        // Get the list of events from localStorage        var whitelistedEvent = Object.entries(JSON.parse(optlyEvents)).map(function(obj)         {            return {                'key':obj[1].apiName,                'id':obj[1].id            }         });            if(whitelistedEvent.some(function(i) { return i.key.includes(event.eventKey)})) {            var eventId = function(e) {                return whitelistedEvent.filter(function(e) {                  if(event.eventKey === e.key) {                    return true;                  }                }).map(function(event) {                    return event.id;                  }).join();              }            event.eventId = eventId();              window.FSWebIntegrator.sendWebEvent(event);        }    }}FSWebIntegrator().optimizelyClientNotificationCenter.addNotificationListener(\"TRACK:event_key, user_id, attributes, event_tags, event\", onTrack);Step 4: Personalize the code to your needsBetween lines 6-11, change:  Line 6 to include your Optimizely account ID  Line 7 to include the project where the web events will be created  Line 8 to include a reference to your Optimizely Web userid (normally this is be the optimizelyEndUserId cookie)  Line 11 to include your reference to the Optimizely SDK clientStep 5: Create the events in Optimizely WebIn the Optimizely Web project, create the event you’d like to forward from Full Stack to Web. Make sure to create them as custom events and with the same API name as your Full Stack events.Step 6: Benefit!This code will then automtically send an Optimizely Web event for every Optimizely Full Stack triggered on your pages."
  },
  
  {
    "title": "Forward Google Analytics events to Optimizely",
    "url": "/posts/forward-google-analytics-events/",
    "categories": "Events",
    "tags": "Optimizely Web, Google Analytics, Events",
    "date": "2022-07-12 00:00:00 -0500",
    





    "snippet": "If you already have an analytics tool running on your website, it may be counter-productive to re-configure your key events every time you add a new tool. Therefore, there is value in re-purposing your existing event tracking implementation for any new analytics tool you want to add on your website.This is why in this tutorial we will see how to re-use Google Analytics event and forward them to Optimizely.Send Google Analytics events to Optimizely WebThis integration will forward GA events that exist in a whitelist and send them straight to Optimizely Web.Step 1: Add this sample code to Optimizely’s Project Javascript.Optimizely’s Project Javascript allows you to run custom Javascript code on any page where the Optimizely snippet is present.window[\"optimizely\"].push({  \"type\": \"addListener\",  \"filter\": {    \"type\": \"lifecycle\",    \"name\": \"initialized\"  },  \"handler\": function(event) {  var utils = optimizely.get('utils');utils.waitUntil(function() {  return window.hasOwnProperty('ga') &amp;&amp; ga.hasOwnProperty('getAll');}).then(function() {  var whitelist = \"add_to_cart,add_to_wishlist\"; // EDIT HERE TO ADD YOUR EVENTS    var eventWhitelist = whitelist.split(\",\");    // Modifies sendHitTask to log the model's \"hitPayload\" field.    ga.getAll()[0].set('customTask', function(model) {      if(model.get('&amp;t') === 'pageview') {        action = 'pageview';      }      else {        action = model.get('eventAction');        category = model.get('eventCategory');        label = model.get('eventLabel');      }      // We replicate based on GA's event label      if (eventWhitelist.length &gt; -1 &amp;&amp; eventWhitelist.indexOf(action) &gt; -1){            window.optimizely.push({                \"type\": \"event\",                \"eventName\": action,                \"tags\": {}            });                        }     });});  }});Step 2: Edit the whitelist to authorise specific eventsBy default, the integration only forwards events if the event names are part of a whitelist. Line 14, you will see a variable called whitelist which contains a comma-separated list of the whitelisted events.Edit this variable to include a comma-separated list of the Google Analytics event names you’d like to forward to Optimizely.Step 3: Create the event names in OptimizelyFor Optimizely to recognise the Google Analytics events, the events need to be re-created in the Optimizely dashboard. This is a one-off step. Go to Optimizely, create a custom event that uses the same event name as your Google Analytics event.Step 4: Benefit!That’s it, now Optimizely Web automatically receives Google Analytics events.Send Google Analytics events to Optimizely FSComing soon!"
  }
  
]

